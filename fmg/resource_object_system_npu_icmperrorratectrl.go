// Copyright 2020 Fortinet, Inc. All rights reserved.
// Author: Hongbin Lu (@fgtdev-hblu), Frank Shen (@frankshen01)
// Documentation:
// Hongbin Lu (@fgtdev-hblu), Frank Shen (@frankshen01),
// Xing Li (@lix-fortinet), Yue Wang (@yuew-ftnt)

// Description: Configure the rate of ICMP errors generated by this FortiGate, which is achieved by token bucket algorithm.

package fortimanager

import (
	"fmt"
	"log"
	"strconv"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
)

func resourceObjectSystemNpuIcmpErrorRateCtrl() *schema.Resource {
	return &schema.Resource{
		Create: resourceObjectSystemNpuIcmpErrorRateCtrlUpdate,
		Read:   resourceObjectSystemNpuIcmpErrorRateCtrlRead,
		Update: resourceObjectSystemNpuIcmpErrorRateCtrlUpdate,
		Delete: resourceObjectSystemNpuIcmpErrorRateCtrlDelete,

		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},

		Schema: map[string]*schema.Schema{
			"scopetype": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Default:  "inherit",
				ForceNew: true,
				ValidateFunc: validation.StringInSlice([]string{
					"adom",
					"global",
					"inherit",
				}, false),
			},
			"adom": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				ForceNew: true,
			},
			"icmpv4_error_bucket_size": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
				Computed: true,
			},
			"icmpv4_error_rate": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
				Computed: true,
			},
			"icmpv4_error_rate_limit": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"icmpv6_error_bucket_size": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
				Computed: true,
			},
			"icmpv6_error_rate": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
				Computed: true,
			},
			"icmpv6_error_rate_limit": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
		},
	}
}

func resourceObjectSystemNpuIcmpErrorRateCtrlUpdate(d *schema.ResourceData, m interface{}) error {
	mkey := d.Id()
	c := m.(*FortiClient).Client
	c.Retries = 1

	paradict := make(map[string]string)
	cfg := m.(*FortiClient).Cfg
	adomv, err := adomChecking(cfg, d)
	if err != nil {
		return fmt.Errorf("Error adom configuration: %v", err)
	}
	paradict["adom"] = adomv

	obj, err := getObjectObjectSystemNpuIcmpErrorRateCtrl(d)
	if err != nil {
		return fmt.Errorf("Error updating ObjectSystemNpuIcmpErrorRateCtrl resource while getting object: %v", err)
	}

	_, err = c.UpdateObjectSystemNpuIcmpErrorRateCtrl(obj, mkey, paradict)
	if err != nil {
		return fmt.Errorf("Error updating ObjectSystemNpuIcmpErrorRateCtrl resource: %v", err)
	}

	log.Printf(strconv.Itoa(c.Retries))

	d.SetId("ObjectSystemNpuIcmpErrorRateCtrl")

	return resourceObjectSystemNpuIcmpErrorRateCtrlRead(d, m)
}

func resourceObjectSystemNpuIcmpErrorRateCtrlDelete(d *schema.ResourceData, m interface{}) error {
	mkey := d.Id()

	c := m.(*FortiClient).Client
	c.Retries = 1

	paradict := make(map[string]string)
	cfg := m.(*FortiClient).Cfg
	adomv, err := adomChecking(cfg, d)
	if err != nil {
		return fmt.Errorf("Error adom configuration: %v", err)
	}
	paradict["adom"] = adomv

	err = c.DeleteObjectSystemNpuIcmpErrorRateCtrl(mkey, paradict)
	if err != nil {
		return fmt.Errorf("Error deleting ObjectSystemNpuIcmpErrorRateCtrl resource: %v", err)
	}

	d.SetId("")

	return nil
}

func resourceObjectSystemNpuIcmpErrorRateCtrlRead(d *schema.ResourceData, m interface{}) error {
	mkey := d.Id()

	c := m.(*FortiClient).Client
	c.Retries = 1

	paradict := make(map[string]string)
	cfg := m.(*FortiClient).Cfg
	adomv, err := adomChecking(cfg, d)
	if err != nil {
		return fmt.Errorf("Error adom configuration: %v", err)
	}
	paradict["adom"] = adomv

	o, err := c.ReadObjectSystemNpuIcmpErrorRateCtrl(mkey, paradict)
	if err != nil {
		return fmt.Errorf("Error reading ObjectSystemNpuIcmpErrorRateCtrl resource: %v", err)
	}

	if o == nil {
		log.Printf("[WARN] resource (%s) not found, removing from state", d.Id())
		d.SetId("")
		return nil
	}

	err = refreshObjectObjectSystemNpuIcmpErrorRateCtrl(d, o)
	if err != nil {
		return fmt.Errorf("Error reading ObjectSystemNpuIcmpErrorRateCtrl resource from API: %v", err)
	}
	return nil
}

func flattenObjectSystemNpuIcmpErrorRateCtrlIcmpv4ErrorBucketSize2edl(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenObjectSystemNpuIcmpErrorRateCtrlIcmpv4ErrorRate2edl(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenObjectSystemNpuIcmpErrorRateCtrlIcmpv4ErrorRateLimit2edl(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenObjectSystemNpuIcmpErrorRateCtrlIcmpv6ErrorBucketSize2edl(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenObjectSystemNpuIcmpErrorRateCtrlIcmpv6ErrorRate2edl(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenObjectSystemNpuIcmpErrorRateCtrlIcmpv6ErrorRateLimit2edl(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func refreshObjectObjectSystemNpuIcmpErrorRateCtrl(d *schema.ResourceData, o map[string]interface{}) error {
	var err error

	if stValue := d.Get("scopetype"); stValue == "" {
		d.Set("scopetype", "inherit")
	}

	if err = d.Set("icmpv4_error_bucket_size", flattenObjectSystemNpuIcmpErrorRateCtrlIcmpv4ErrorBucketSize2edl(o["icmpv4-error-bucket-size"], d, "icmpv4_error_bucket_size")); err != nil {
		if vv, ok := fortiAPIPatch(o["icmpv4-error-bucket-size"], "ObjectSystemNpuIcmpErrorRateCtrl-Icmpv4ErrorBucketSize"); ok {
			if err = d.Set("icmpv4_error_bucket_size", vv); err != nil {
				return fmt.Errorf("Error reading icmpv4_error_bucket_size: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading icmpv4_error_bucket_size: %v", err)
		}
	}

	if err = d.Set("icmpv4_error_rate", flattenObjectSystemNpuIcmpErrorRateCtrlIcmpv4ErrorRate2edl(o["icmpv4-error-rate"], d, "icmpv4_error_rate")); err != nil {
		if vv, ok := fortiAPIPatch(o["icmpv4-error-rate"], "ObjectSystemNpuIcmpErrorRateCtrl-Icmpv4ErrorRate"); ok {
			if err = d.Set("icmpv4_error_rate", vv); err != nil {
				return fmt.Errorf("Error reading icmpv4_error_rate: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading icmpv4_error_rate: %v", err)
		}
	}

	if err = d.Set("icmpv4_error_rate_limit", flattenObjectSystemNpuIcmpErrorRateCtrlIcmpv4ErrorRateLimit2edl(o["icmpv4-error-rate-limit"], d, "icmpv4_error_rate_limit")); err != nil {
		if vv, ok := fortiAPIPatch(o["icmpv4-error-rate-limit"], "ObjectSystemNpuIcmpErrorRateCtrl-Icmpv4ErrorRateLimit"); ok {
			if err = d.Set("icmpv4_error_rate_limit", vv); err != nil {
				return fmt.Errorf("Error reading icmpv4_error_rate_limit: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading icmpv4_error_rate_limit: %v", err)
		}
	}

	if err = d.Set("icmpv6_error_bucket_size", flattenObjectSystemNpuIcmpErrorRateCtrlIcmpv6ErrorBucketSize2edl(o["icmpv6-error-bucket-size"], d, "icmpv6_error_bucket_size")); err != nil {
		if vv, ok := fortiAPIPatch(o["icmpv6-error-bucket-size"], "ObjectSystemNpuIcmpErrorRateCtrl-Icmpv6ErrorBucketSize"); ok {
			if err = d.Set("icmpv6_error_bucket_size", vv); err != nil {
				return fmt.Errorf("Error reading icmpv6_error_bucket_size: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading icmpv6_error_bucket_size: %v", err)
		}
	}

	if err = d.Set("icmpv6_error_rate", flattenObjectSystemNpuIcmpErrorRateCtrlIcmpv6ErrorRate2edl(o["icmpv6-error-rate"], d, "icmpv6_error_rate")); err != nil {
		if vv, ok := fortiAPIPatch(o["icmpv6-error-rate"], "ObjectSystemNpuIcmpErrorRateCtrl-Icmpv6ErrorRate"); ok {
			if err = d.Set("icmpv6_error_rate", vv); err != nil {
				return fmt.Errorf("Error reading icmpv6_error_rate: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading icmpv6_error_rate: %v", err)
		}
	}

	if err = d.Set("icmpv6_error_rate_limit", flattenObjectSystemNpuIcmpErrorRateCtrlIcmpv6ErrorRateLimit2edl(o["icmpv6-error-rate-limit"], d, "icmpv6_error_rate_limit")); err != nil {
		if vv, ok := fortiAPIPatch(o["icmpv6-error-rate-limit"], "ObjectSystemNpuIcmpErrorRateCtrl-Icmpv6ErrorRateLimit"); ok {
			if err = d.Set("icmpv6_error_rate_limit", vv); err != nil {
				return fmt.Errorf("Error reading icmpv6_error_rate_limit: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading icmpv6_error_rate_limit: %v", err)
		}
	}

	return nil
}

func flattenObjectSystemNpuIcmpErrorRateCtrlFortiTestDebug(d *schema.ResourceData, fosdebugsn int, fosdebugbeg int, fosdebugend int) {
	log.Printf(strconv.Itoa(fosdebugsn))
	e := validation.IntBetween(fosdebugbeg, fosdebugend)
	log.Printf("ER List: %v", e)
}

func expandObjectSystemNpuIcmpErrorRateCtrlIcmpv4ErrorBucketSize2edl(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandObjectSystemNpuIcmpErrorRateCtrlIcmpv4ErrorRate2edl(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandObjectSystemNpuIcmpErrorRateCtrlIcmpv4ErrorRateLimit2edl(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandObjectSystemNpuIcmpErrorRateCtrlIcmpv6ErrorBucketSize2edl(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandObjectSystemNpuIcmpErrorRateCtrlIcmpv6ErrorRate2edl(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandObjectSystemNpuIcmpErrorRateCtrlIcmpv6ErrorRateLimit2edl(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func getObjectObjectSystemNpuIcmpErrorRateCtrl(d *schema.ResourceData) (*map[string]interface{}, error) {
	obj := make(map[string]interface{})

	if v, ok := d.GetOk("icmpv4_error_bucket_size"); ok || d.HasChange("icmpv4_error_bucket_size") {
		t, err := expandObjectSystemNpuIcmpErrorRateCtrlIcmpv4ErrorBucketSize2edl(d, v, "icmpv4_error_bucket_size")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["icmpv4-error-bucket-size"] = t
		}
	}

	if v, ok := d.GetOk("icmpv4_error_rate"); ok || d.HasChange("icmpv4_error_rate") {
		t, err := expandObjectSystemNpuIcmpErrorRateCtrlIcmpv4ErrorRate2edl(d, v, "icmpv4_error_rate")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["icmpv4-error-rate"] = t
		}
	}

	if v, ok := d.GetOk("icmpv4_error_rate_limit"); ok || d.HasChange("icmpv4_error_rate_limit") {
		t, err := expandObjectSystemNpuIcmpErrorRateCtrlIcmpv4ErrorRateLimit2edl(d, v, "icmpv4_error_rate_limit")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["icmpv4-error-rate-limit"] = t
		}
	}

	if v, ok := d.GetOk("icmpv6_error_bucket_size"); ok || d.HasChange("icmpv6_error_bucket_size") {
		t, err := expandObjectSystemNpuIcmpErrorRateCtrlIcmpv6ErrorBucketSize2edl(d, v, "icmpv6_error_bucket_size")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["icmpv6-error-bucket-size"] = t
		}
	}

	if v, ok := d.GetOk("icmpv6_error_rate"); ok || d.HasChange("icmpv6_error_rate") {
		t, err := expandObjectSystemNpuIcmpErrorRateCtrlIcmpv6ErrorRate2edl(d, v, "icmpv6_error_rate")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["icmpv6-error-rate"] = t
		}
	}

	if v, ok := d.GetOk("icmpv6_error_rate_limit"); ok || d.HasChange("icmpv6_error_rate_limit") {
		t, err := expandObjectSystemNpuIcmpErrorRateCtrlIcmpv6ErrorRateLimit2edl(d, v, "icmpv6_error_rate_limit")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["icmpv6-error-rate-limit"] = t
		}
	}

	return &obj, nil
}
